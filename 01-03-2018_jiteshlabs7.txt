[1.] PERFORM STRING TEST AND FILE TEST

# STRING TEST

a="abc"
b="efg"

if [ $a = $b ]
then
   echo "$a = $b : a is equal to b"
else
   echo "$a = $b: a is not equal to b"
fi

if [ $a != $b ]
then
   echo "$a != $b : a is not equal to b"
else
   echo "$a != $b: a is equal to b"
fi

if [ -z $a ]
then
   echo "-z $a : string length is zero"
else
   echo "-z $a : string length is not zero"
fi

if [ -n $a ]
then
   echo "-n $a : string length is not zero"
else
   echo "-n $a : string length is zero"
fi

if [ $a ]
then
   echo "$a : string is not empty"
else
   echo "$a : string is empty"
fi


OUTPUT

abc = efg: a is not equal to b
abc != efg : a is not equal to b
-z abc : string length is not zero
-n abc : string length is noy zero 
abc : string is not empty


* FILE TEST


file="jitesh/jiteshlabs7.txt"
if [ -s $file ]
then
   echo "File size is zero"
 else
   echo "File size is not zero"
  fi
if [ -r $file ]
then
   echo "File has read access"
  else
   echo "File does not have read access"
  fi
if [ -w $file ]
then
   echo "File has write permission"
  else
   echo "File does not have write permission"
  fi
if [ -x $file ]
then
   echo "File has execute permission"
  else
   echo "File does not have execute permission"
  fi


OUTPUT

File size is not zero
File does not read access
File does not have write permission
File does not have execute permission

[2.] FILE RELATED COMMANDS
     We have following commands for using in files for given requirements,
cp -used for copying files and directories.
rm -used to remove objects such as files, directories.
mv -that moves one or more files or directories from one place to another.
cmp -compares two files of any type and writes the results to the standard output.
diff -compare the contents of file1 and file2 and write to the standard output the list of changes necessary to convert one file into the other.
comm -used to compare two files for common and distinct lines

[3.] SETTING PERMISSIONS TO THE FILES/DIRECTORIES.
  We know permission to read(r) is denoted by digit 4 and similarly for write(w) & execute(x)is 2 & 1.
We use command chmod for setting permissions for files/directories.
for example our filenames is filestest.sh then,
$ chmod 771 filetest.sh
$ ls -l filetest.sh
Here we get the following after typing,
-rwxrwx--x 1 cs2017a112 cs20a112 164 Mar 1 09:12 filetest.sh
By the first character '-' it means its a file but if it was a directory then it would be 'd' instead.
For again changing the permission,
$ chmod 751 filetest.sh

[4.] SHELL SCRIPT TO PREFIX ALL THE FILENAMES WITH THE DATE DD/MM/YY FORMAT.

file="/home/jitesh/test"
cdate=$(date +%d-%m-%Y)
for file in *
do      
        mv "$file" "$cdate"_"$file"
done 

OUTPUT

01-03-2018_t1
01-03-2018_t2
01-03-2018_t3
